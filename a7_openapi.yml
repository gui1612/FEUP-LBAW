openapi: 3.0.0

info:
  version: "1.0.0"
  title: "Wrottit API"
  description: "Web Resources Specification (A7) for Wrottit"

servers:
  - url: http://lbaw2264.lbaw.fe.up.pt
    description: Production server

externalDocs:
  url: https://git.fe.up.pt/lbaw/lbaw2223/lbaw2264/-/wikis
  description: Wrottit documentation

tags:
  - name: "M02: System Administration"
  - name: "M03: Notifications"
  - name: "M04: Posts"
  - name: "M05: Comments"

paths:

  # M02 - System Administration
  /admin:
    get:
      operationId: "R201"
      summary: "R201: View Administration Panel"
      description: "View administration panel. Access: ADM"
      tags:
        - "M02 - System Administration"

      responses:
        200:
          description: "Ok. Show Administration Panel UI06"

  /admin/team:
    get:
      operationId: "R202"
      summary: "R202: View Administrators"
      description: "View all system administrators. Access: ADM"
      tags:
        - "M02 - System Administration"

      responses:
        200:
          description: "Ok. Show Administrators Listing UI"

  /api/admin/team/{username}:
    put:
      operationId: "R203"
      summary: "R203: Add Administrator API Route"
      description: "Add user to the team of system administrators. Access: ADM"
      tags:
        - "M02 - System Administration"

      parameters:
        - in: path
          name: username
          description: "The username of the user to add to the team of system administrators."
          required: true
          schema:
            type: string

      responses:
        200:
          description: "Ok. Successfuly added member to the administration team."

        422:
          description: "Validation error. The member was not added to the administration team."
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    enum:
                      - user:not-found

    delete:
      operationId: "R204"
      summary: "R204: Remove Administrator API Route"
      description: "Remove user from the team of system administrators. Access: ADM"
      tags:
        - "M02 - System Administration"

      parameters:
        - in: path
          name: username
          description: "The username of the user to remove from the team of system administrators."
          required: true
          schema:
            type: string

      responses:
        200:
          description: "Ok. Successfuly removed the member from the administration team."

        422:
          description: "Validation error. The member was not removed from the administration team."
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    enum:
                      - user:not-found

  # M03: Notifications

  /api/notifications:
    get:
      operationId: R301
      summary: "R301: View Notifications"
      description: "Displays user notifications. Access: USR"
      tags:
        - "M03: Notifications"

      responses:
        "200":
          description: "Ok. Show Notifications"
        "401":
          description: "Access unauthorized. Not logged in"

  /notifications:
    put:
      operationId: R302
      summary: "R302: Mark Notifications as Read"
      description: "Mark notification as read. Access: USR"
      tags:
        - "M03: Messages and Notifications"

      responses:
        "200":
          description: "Ok. Show Notifications"
        "401":
          description: "Access unauthorized. Not logged in"

  #M04 : Posts
  /:
    get:
      operationId: "401"
      summary: "R401: View Homepage"
      description: "View feed of most popular or recent posts. Access: PUB"
      tags:
        - "M04: Posts"
      
      parameters:
        - in: query
          name: sort
          description: "Posts ordering"
          schema:
            enum:
              - popular
              - recent

      responses:
        200:
          description: "Ok. Show Homepage UI01"

  /post:
    get:
      operationId: R402
      summary: "R402 : Create post form"
      description: "Provide new post creation form. Access: USR"
      tags:
        - "M04: Posts"

      responses:
        '200':
          description: 'Ok. Show Create Post Form'
        '302':
          description: 'Redirect after trying to get Create Post Form'
          headers:
            Location:
              schema:
                type: string  
              examples:
                302Failure:
                  description: 'You are not logged in. Failed post creation. Redirect to login Page.'
                  value: '/login' 

    post:
      operationId: R403
      summary: "R403 : Create post action"
      description: "Processes the new post creation form. Access: USR"
      tags:
        - "M04: Posts"

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
                rating:
                  type: integer
                tag_ids:
                  type: array
                  minLength: 1
                  maxLength: 3
              required:
                - title
                - body
                - rating
                - tag_ids

      responses:
        "302":
          description: "Redirect after processing the create post form."
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: "Successful post creation. Redirect to Post Page."
                  value: "/post/{id}"
                302Failure:
                  description: "Failed post creation. Redirect to Create Post form."
                  value: "/post"


  /post/{id}:
    get:
      operationId: R404
      summary: "R404 : View Post Page"
      description: "View a Post Page. Access: PUB"
      tags:
        - "M04: Posts"

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        "200":
          description: "OK. Show Post Page"
        "404":
          description: "Post not found"

    delete:
      operationId: R405
      summary: "R405 : Delete post action"
      description: "Processes a request to delete a post. Access: OWN, ADM"
      tags:
        - "M04: Posts"

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        302:
          description: "Redirect after deleting post."
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: "Successful post deletion. Redirect to homepage."
                  value: "/"
                302Failure:
                  description: "Failed to delete post. Redirect to post page"
                  value: "/post/{id}"

  /post/{id}/edit:
    get:
      operationId: R406
      summary: "R406 : Post edition form"
      description: "Provide a form for post edition. Access: OWN"
      tags:
        - "M04: Posts"

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        "200":
          description: "OK. Show post edition form"
        "401":
          description: "Unauthorized. Must be authenticated."
        "403":
          description: "Unauthorized. Must be the owner of the post"
        "404":
          description: "Post not found"

    put:
      operationId: R407
      summary: "R407 : Edit post action"
      description: "Processes the user edit profile form submission. Access: OWN"
      tags:
        - "M04: Posts"

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string

      responses:
        "302":
          description: "Redirect after processing the post updated information"
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: "Successful post edition. Redirect to the post page."
                  value: "/post/{id}"
                302Failure:
                  description: "Failed post edition. Redirect to the edit post page."
                  value: "/post/{id}/edit"

  # M05 : Comments
  /comment:
    post:
      operationId: R501
      summary: "R501 : Create comment"
      description: "Deals with the new comment's creation form. Access: USR"
      tags:
        - "M05: Comments"

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                body:
                  type: string
                rating:
                  type: integer
                post_id:
                  type: integer
              required:
                - body
                - rating
                - post_id

      responses:
        "200":
          description: "Successful comment creation. Return created comment"
        "400":
          description: "Bad Request. Failed to create comment"
        "401":
          description: "Unauthorized. Authentication is required."
        "404":
          description: "Post Id not found."

  /comment/{id}:
    put:
      operationId: R502
      summary: "R502 : Edit comment"
      description: "Deals with a comment edition. Access: OWN"
      tags:
        - "M05: Comments"

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                body:
                  type: string

      responses:
        "200":
          description: "Comment updated successfully. Return updated comment"
        "400":
          description: "Bad Request. Failed to update comment."
        "401":
          description: "Unauthorized. Authentication is required."
        "403":
          description: "Forbidden. Must be the owner of the comment."
        "404":
          description: "Comment Id not found."

    delete:
      operationId: R503
      summary: "R503 : Delete comment"
      description: "Processes a request to delete a comment. Access: OWN, ADM"
      tags:
        - "M05: Comments"

      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      responses:
        "200":
          description: "Comment deleted successfully. Return deleted comment"
        "401":
          description: "Unauthorized. Authentication is required."
        "403":
          description: "Forbidden. Must be the owner of the comment."
        "404":
          description: "Comment Id not found."

  /api/post/{id}/comments:
    get:
      operationId: R504
      summary: "R504 : Comments of a given post"
      description: "Returns comments of a given post according to user parameters. Access: PUB"
      tags:
        - "M05: Comments"
      parameters:
        - in: path
          name: id
          description: "Post Id"
          schema:
            type: integer
          required: true
        - in: query
          name: offset
          description: "starting value to fetch results"
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
        - in: query
          name: limit
          description: "limits the number of results"
          schema:
            type: integer
            minimum: 1
          required: false # returns all posts if not specified

      responses:
        "200":
          description: "OK. Return a list of comments that fit the criteria"
        "404":
          description: "Post Id not found."

